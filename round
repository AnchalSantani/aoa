#include <stdio.h>

void round_robin() {
    int n, tq, bt[20], rt[20], wt[20] = {0}, tat[20], time = 0;
    float avg_wt = 0, avg_tat = 0;

    printf("\n[4] Round Robin Scheduling\n");
    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter burst times:\n");
    for (int i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &bt[i]);
        rt[i] = bt[i]; // Initialize remaining time
    }

    printf("Enter time quantum: ");
    scanf("%d", &tq);

    int done;
    do {
        done = 1; // Assume all processes are done
        for (int i = 0; i < n; i++) {
            if (rt[i] > 0) {
                done = 0; // At least one process left
                if (rt[i] > tq) {
                    time += tq;
                    rt[i] -= tq;
                } else {
                    time += rt[i];
                    wt[i] = time - bt[i]; // Calculate waiting time
                    rt[i] = 0;
                }
            }
        }
    } while (!done);

    // Calculate Turnaround Time
    for (int i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
        avg_wt += wt[i];
        avg_tat += tat[i];
    }

    // Output Results
    printf("\nProcess\tBT\tWT\tTAT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }

    printf("Average WT: %.2f\n", avg_wt / n);
    printf("Average TAT: %.2f\n", avg_tat / n);
}
int main()
{
    round_robin();
    return 0;
}








